Program id: 2
Execution Stack: ( Ref(Int) v; ( new(v, 20); ( fork(( new(v, 30); fork(new(v, 40)) )); print(rH(v)) ) ) )
Symbols Table: 
Out: 
Heap: 

Program id: 2
Execution Stack: Ref(Int) v, ( new(v, 20); ( fork(( new(v, 30); fork(new(v, 40)) )); print(rH(v)) ) )
Symbols Table: 
Out: 
Heap: 

Program id: 2
Execution Stack: ( new(v, 20); ( fork(( new(v, 30); fork(new(v, 40)) )); print(rH(v)) ) )
Symbols Table: v -> (0, Int), 
Out: 
Heap: 

Program id: 2
Execution Stack: new(v, 20), ( fork(( new(v, 30); fork(new(v, 40)) )); print(rH(v)) )
Symbols Table: v -> (0, Int), 
Out: 
Heap: 

Program id: 2
Execution Stack: ( fork(( new(v, 30); fork(new(v, 40)) )); print(rH(v)) )
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 2
Execution Stack: fork(( new(v, 30); fork(new(v, 40)) )), print(rH(v))
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 2
Execution Stack: print(rH(v))
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 4
Execution Stack: ( new(v, 30); fork(new(v, 40)) )
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 2
Execution Stack: 
Symbols Table: v -> (1, Int), 
Out: 20 
Heap: 1 -> 20, 

Program id: 4
Execution Stack: new(v, 30), fork(new(v, 40))
Symbols Table: v -> (1, Int), 
Out: 20 
Heap: 1 -> 20, 

Program id: 4
Execution Stack: fork(new(v, 40))
Symbols Table: v -> (2, Int), 
Out: 20 
Heap: 1 -> 20, 2 -> 30, 

Program id: 4
Execution Stack: 
Symbols Table: v -> (2, Int), 
Out: 20 
Heap: 2 -> 30, 

Program id: 5
Execution Stack: new(v, 40)
Symbols Table: v -> (2, Int), 
Out: 20 
Heap: 2 -> 30, 

Program id: 5
Execution Stack: 
Symbols Table: v -> (3, Int), 
Out: 20 
Heap: 2 -> 30, 3 -> 40, 

