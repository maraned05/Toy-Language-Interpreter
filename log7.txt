Program id: 6
Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Program id: 6
Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Program id: 6
Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) ) ) )
Symbols Table: v -> (0, Int), 
Out: 
Heap: 

Program id: 6
Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) ) )
Symbols Table: v -> (0, Int), 
Out: 
Heap: 

Program id: 6
Execution Stack: ( Ref(Ref(Int)) a; ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) ) )
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 6
Execution Stack: Ref(Ref(Int)) a, ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) )
Symbols Table: v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 6
Execution Stack: ( new(a, v); ( print(rH(v)); print(rH(rH(a)) ADD 5) ) )
Symbols Table: a -> (0, Ref(Int)), v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 6
Execution Stack: new(a, v), ( print(rH(v)); print(rH(rH(a)) ADD 5) )
Symbols Table: a -> (0, Ref(Int)), v -> (1, Int), 
Out: 
Heap: 1 -> 20, 

Program id: 6
Execution Stack: ( print(rH(v)); print(rH(rH(a)) ADD 5) )
Symbols Table: a -> (2, Ref(Int)), v -> (1, Int), 
Out: 
Heap: 1 -> 20, 2 -> (1, Int), 

Program id: 6
Execution Stack: print(rH(v)), print(rH(rH(a)) ADD 5)
Symbols Table: a -> (2, Ref(Int)), v -> (1, Int), 
Out: 
Heap: 1 -> 20, 2 -> (1, Int), 

Program id: 6
Execution Stack: print(rH(rH(a)) ADD 5)
Symbols Table: a -> (2, Ref(Int)), v -> (1, Int), 
Out: 20 
Heap: 1 -> 20, 2 -> (1, Int), 

Program id: 6
Execution Stack: 
Symbols Table: a -> (2, Ref(Int)), v -> (1, Int), 
Out: 20 25 
Heap: 1 -> 20, 2 -> (1, Int), 

