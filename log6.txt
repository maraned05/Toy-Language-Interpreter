Execution Stack: ( Int a; ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Int a, ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) )
Symbols Table: a -> 0, 
Out: 
Heap: 

Execution Stack: Int b, ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) )
Symbols Table: a -> 0, 
Out: 
Heap: 

Execution Stack: ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) )
Symbols Table: a -> 0, b -> 0, 
Out: 
Heap: 

Execution Stack: Int c, ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) )
Symbols Table: a -> 0, b -> 0, 
Out: 
Heap: 

Execution Stack: ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) )
Symbols Table: a -> 0, b -> 0, c -> 0, 
Out: 
Heap: 

Execution Stack: a = 3, ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) )
Symbols Table: a -> 0, b -> 0, c -> 0, 
Out: 
Heap: 

Execution Stack: ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) )
Symbols Table: a -> 3, b -> 0, c -> 0, 
Out: 
Heap: 

Execution Stack: b = 4, (IF(a GREATER b) THEN(c = 1) ELSE(c = -1))
Symbols Table: a -> 3, b -> 0, c -> 0, 
Out: 
Heap: 

Execution Stack: (IF(a GREATER b) THEN(c = 1) ELSE(c = -1))
Symbols Table: a -> 3, b -> 4, c -> 0, 
Out: 
Heap: 

Execution Stack: c = -1
Symbols Table: a -> 3, b -> 4, c -> 0, 
Out: 
Heap: 

Execution Stack: 
Symbols Table: a -> 3, b -> 4, c -> -1, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: Ref(Ref(Int)) a, ( new(a, v); ( print(v); print(a) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( new(a, v); ( print(v); print(a) ) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: new(a, v), ( print(v); print(a) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( print(v); print(a) )
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(v), print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 1 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: 
Symbols Table: a -> 2, v -> 1, 
Out: 1 2 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: Ref(Ref(Int)) a, ( new(a, v); ( print(v); print(a) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( new(a, v); ( print(v); print(a) ) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: new(a, v), ( print(v); print(a) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( print(v); print(a) )
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(v), print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 1 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: 
Symbols Table: a -> 2, v -> 1, 
Out: 1 2 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: ( Ref(Int) v; ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: Ref(Int) v, ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: 
Out: 
Heap: 

Execution Stack: ( new(v, 20); ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: new(v, 20), ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 0, 
Out: 
Heap: 

Execution Stack: ( Ref(Ref(Int)) a; ( new(a, v); ( print(v); print(a) ) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: Ref(Ref(Int)) a, ( new(a, v); ( print(v); print(a) ) )
Symbols Table: v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( new(a, v); ( print(v); print(a) ) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: new(a, v), ( print(v); print(a) )
Symbols Table: a -> 0, v -> 1, 
Out: 
Heap: 1 -> 20, 

Execution Stack: ( print(v); print(a) )
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(v), print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: print(a)
Symbols Table: a -> 2, v -> 1, 
Out: 1 
Heap: 1 -> 20, 2 -> 1, 

Execution Stack: 
Symbols Table: a -> 2, v -> 1, 
Out: 1 2 
Heap: 1 -> 20, 2 -> 1, 

