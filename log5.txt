Execution Stack: ( Int a; ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) ) ) 
Symbols Table: 
Out: 

Execution Stack: ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) ) Int a 
Symbols Table: 
Out: 

Execution Stack: ( Int b; ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) ) 
Symbols Table: a -> 0, 
Out: 

Execution Stack: ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) Int b 
Symbols Table: a -> 0, 
Out: 

Execution Stack: ( Int c; ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) ) 
Symbols Table: a -> 0, b -> 0, 
Out: 

Execution Stack: ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) Int c 
Symbols Table: a -> 0, b -> 0, 
Out: 

Execution Stack: ( a = 3; ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) ) 
Symbols Table: a -> 0, b -> 0, c -> 0, 
Out: 

Execution Stack: ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) a = 3 
Symbols Table: a -> 0, b -> 0, c -> 0, 
Out: 

Execution Stack: ( b = 4; (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) ) 
Symbols Table: a -> 3, b -> 0, c -> 0, 
Out: 

Execution Stack: (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) b = 4 
Symbols Table: a -> 3, b -> 0, c -> 0, 
Out: 

Execution Stack: (IF(a GREATER b) THEN(c = 1) ELSE(c = -1)) 
Symbols Table: a -> 3, b -> 4, c -> 0, 
Out: 

Execution Stack: c = -1 
Symbols Table: a -> 3, b -> 4, c -> 0, 
Out: 

Execution Stack: 
Symbols Table: a -> 3, b -> 4, c -> -1, 
Out: 

